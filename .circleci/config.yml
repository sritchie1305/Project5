version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1

commands:
    destroy-env:
      description: Destroy cluster on fail
      steps:
        - run:
            name: Destroy all infrastructure
            when: on_fail
            command: |
              aws eks update-kubeconfig --name="Cluster-${CIRCLE_WORKFLOW_ID:0:7}"
              export KUBECONFIG=/root/.kube/config
              kubectl get svc
              kubectl delete -f deployment/
              eksctl delete cluster Cluster-${CIRCLE_WORKFLOW_ID:0:7}


jobs:
    linting-app-code:
      docker:
      - image: python:3.7.3-stretch
      working_directory: ~/repo
      steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - run:
          name: Lint the Dockerfile
          command: |          
            . venv/bin/activate
            make lint
            RESULT=$?
            if [ ${RESULT} -eq 0 ]
            then
              echo "linting success"
            else
              echo "linting failed"
            fi

    push-docker-image-to-image-repo:
      docker:
      - image: circleci/golang:1.15
      working_directory: ~/repo
      steps:
      - setup_remote_docker:
          version: 19.03.13
      - checkout
      - run:
          name: Run Docker Build on the app
          command: |
            docker build --tag project5 .
            docker image ls
      - run:
          name: Upload the container to remote repo
          command: |
            #login to docker        
            docker login --username $DOCKER_USERNAME --password $DOCKER_ACCESS_TOKEN
            #tag local image with unique circleci ID in prep for pushing to remote repo
            docker tag project5 $DOCKER_USERNAME/project5:latest
            #push the image to docker repo
            docker push $DOCKER_USERNAME/project5:latest
    
    create-eks-cluster:
      executor: aws-eks/python3
      steps:
        - checkout
        - aws-eks/install-aws-iam-authenticator:
            release-tag: ''
        - run:
            name:
            command: |
              if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
              fi
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
              fi
              $SUDO mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download
        - aws-eks/create-cluster:
            cluster-name: Cluster-${CIRCLE_WORKFLOW_ID:0:7}
            skip-kubectl-install: false
            verbose: 3
            node-type: t2.micro
            nodes-max: 2
            ssh-access: false
            ssh-public-key: ''
        - destroy-env
      
    
    deploy-new-eks-cluster:
      executor: aws-eks/python3
      steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: Cluster-${CIRCLE_WORKFLOW_ID:0:7}
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployment.yml
          resource-name: deployment/project5
      - destroy-env

    test-new-cluster:
      executor: aws-eks/python3
      steps:
        - kubernetes/install
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: Cluster-${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: check new cluster details
            command: |
              kubectl get services
              kubectl get pods
              kubectl get deployment
              kubectl get nodes
        - destroy-env


workflows:
  default:
    jobs:
      - linting-app-code
      - push-docker-image-to-image-repo:
          requires:
            - linting-app-code
      - create-eks-cluster:
          requires:
            - push-docker-image-to-image-repo
      - deploy-new-eks-cluster:
          requires:
            - create-eks-cluster
      - test-new-cluster:
          requires:
            - deploy-new-eks-cluster